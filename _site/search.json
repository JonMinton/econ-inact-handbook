[
  {
    "objectID": "pages/tags.html",
    "href": "pages/tags.html",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "A tag is a git concept that allows you to label and attach information to a commit. For versioning, tags should be named according to the major/minor/patch format, prefixed by ‘v’, e.g. v1.1.0 and should match up with the version set in the package’s DESCRIPTION file on that commit. There are two types of git tags: lightweight and annotated.\nA lightweight tag can be thought of as a branch that does not change and is simply a pointer to a specific commit.\nAnnotated tags are more complicated. They are stored as full objects in the Git database meaning they get checksummed and contain details such as the tagger name, email, date and a tagging message.\nAlthough annotated tags include all this information (and are generally recommended over lightweight tags), lightweight tags should be sufficient for the versioning process when developing PHS R packages.\nReleases are a Github higher level concept, described by GitHub as “first-class objects with changelogs and binary assets that present a full project history beyond Git artifacts.” Compared to tags, releases include release notes and links to download the software or source code from GitHub. A release can be created from an existing tag, alternatively an associated tag will be created along with the new release.\nIn order of complexity, we would have lightweight tags being simplest, followed by annotated tags, and lastly releases."
  },
  {
    "objectID": "pages/tags.html#git-tags-and-releases",
    "href": "pages/tags.html#git-tags-and-releases",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "A tag is a git concept that allows you to label and attach information to a commit. For versioning, tags should be named according to the major/minor/patch format, prefixed by ‘v’, e.g. v1.1.0 and should match up with the version set in the package’s DESCRIPTION file on that commit. There are two types of git tags: lightweight and annotated.\nA lightweight tag can be thought of as a branch that does not change and is simply a pointer to a specific commit.\nAnnotated tags are more complicated. They are stored as full objects in the Git database meaning they get checksummed and contain details such as the tagger name, email, date and a tagging message.\nAlthough annotated tags include all this information (and are generally recommended over lightweight tags), lightweight tags should be sufficient for the versioning process when developing PHS R packages.\nReleases are a Github higher level concept, described by GitHub as “first-class objects with changelogs and binary assets that present a full project history beyond Git artifacts.” Compared to tags, releases include release notes and links to download the software or source code from GitHub. A release can be created from an existing tag, alternatively an associated tag will be created along with the new release.\nIn order of complexity, we would have lightweight tags being simplest, followed by annotated tags, and lastly releases."
  },
  {
    "objectID": "pages/tags.html#creating-and-pushing-tags",
    "href": "pages/tags.html#creating-and-pushing-tags",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "Creating and Pushing Tags",
    "text": "Creating and Pushing Tags\nTo see a list of tags currently being used, you can run git tag. For phstemplates, we see the following tags (as at 26th June 2024).\n$ git tag\nv1.0.0\nv1.1.0\nv1.2.0\nv1.2.1\nTo see details from a particular tag and the associated commit, you can use the git show command.\n$ git show v1.2.1\ncommit 86878078431e4782697d808bb7e64b89b11de0d8 (tag: v1.2.1)\nAuthor: Alan Y &lt;34042624+alan-y@users.noreply.github.com&gt;\nDate:   Fri Jun 14 16:39:12 2024 +0100\nTo create a lightweight tag, we simply add on the name you want to give the tag after the git tag command. For instance, git tag v1.2.2.\nFor an annotated tag, the -a option must be specified in git tag and the -m option can be used to set the tagging message. For example git tag -a v1.2.2 -m \"my version 1.2.2\" . Note that if you do not include -m, a text editor will open up and you can enter the message anyway.\nThe key thing to remember with tags is that by default, git push does not transfer tags to Github. Tags have to be pushed separately after they have been created – for example, by typing git push origin v1.2.2.\nA useful feature is that commits can be tagged retrospectively using the shortened SHA (secure hash algorithm) associated with a commit. For example, to tag commit 8687807 in phstemplates with v1.2.1, we would use\n$ git tag v1.2.1 8687807\n$ git push origin v1.2.1"
  },
  {
    "objectID": "pages/tags.html#further-reading",
    "href": "pages/tags.html#further-reading",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "Further Reading",
    "text": "Further Reading\nGit - Tagging\nManaging releases in a repository - GitHub Docs\nIs there a standard naming convention for git tags?\nWhat’s the difference between tag and release?"
  },
  {
    "objectID": "pages/recommended-git-workflow.html",
    "href": "pages/recommended-git-workflow.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "Our recommended Git/Github developer workflow for versioning and tagging is as follows:\n\nCreate a development branch and switch to it, e.g.\ngit checkout -b feature/dev\nAdd your developments, commit and push these changes\ngit add -A\ngit commit -m \"my changes\"\ngit push origin feature/dev,\nSubmit a pull request on Github and get your changes reviewed\nOnce changes are approved, the maintainer decides on the major/minor/patch version increment (e.g. 1.3.0)\nThe developer updates to the agreed version in DESCRIPTION, e.g.\nusethis::use_version(1.3.0)\ngit add -A\ngit commit -m \"incrementing to v1.3.0\"\ngit push origin feature/dev\nThe pull request is merged to the main branch\nThe commit (let’s say the SHA is 1234567) is tagged with v1.3.0\ngit tag 1234567 v1.3.0\ngit push origin v1.3.0\n\nGraphically, this looks as follows:\n\n\n\n\nflowchart TB\n    mb([\"Main Branch\"])\n    cdb[\"Development Branch\"]\n    ca[\"Changes added\\nChanges committed\\nChanges pushed\"]\n    cr{Code Review}\n    vi[Version incremented]\n    ta[Tag latest commit]\n    mbu([Main Branch updated])\n\n    mb --\"git checkout -b feature/dev\" --&gt; cdb\n    cdb --\"git add -A\\ngit commit -m 'my changes'\\ngit push origin feature/dev\" --&gt; ca\n    ca --\"Github: Make Pull Request\"--&gt; cr\n    cr --\"Accept changes\\nusethis::use_version(1.3.0)\\ngit add -A\\ngit commit -m 'incrementing to v1.3.0'\\ngit push origin feature/dev\"--&gt; vi\n    vi -- \"Pull request merged to main\" --&gt; mbu\n    cr --\"Reject changes\"--&gt; cdb\n    ta &lt;-.\"git tag 1234567 v1.3.0\\ngit push origin v1.3.0\".-&gt; mbu\n\n    linkStyle default stroke:lightgray"
  },
  {
    "objectID": "pages/recommended-git-workflow.html#recommended-git-workflow",
    "href": "pages/recommended-git-workflow.html#recommended-git-workflow",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "Our recommended Git/Github developer workflow for versioning and tagging is as follows:\n\nCreate a development branch and switch to it, e.g.\ngit checkout -b feature/dev\nAdd your developments, commit and push these changes\ngit add -A\ngit commit -m \"my changes\"\ngit push origin feature/dev,\nSubmit a pull request on Github and get your changes reviewed\nOnce changes are approved, the maintainer decides on the major/minor/patch version increment (e.g. 1.3.0)\nThe developer updates to the agreed version in DESCRIPTION, e.g.\nusethis::use_version(1.3.0)\ngit add -A\ngit commit -m \"incrementing to v1.3.0\"\ngit push origin feature/dev\nThe pull request is merged to the main branch\nThe commit (let’s say the SHA is 1234567) is tagged with v1.3.0\ngit tag 1234567 v1.3.0\ngit push origin v1.3.0\n\nGraphically, this looks as follows:\n\n\n\n\nflowchart TB\n    mb([\"Main Branch\"])\n    cdb[\"Development Branch\"]\n    ca[\"Changes added\\nChanges committed\\nChanges pushed\"]\n    cr{Code Review}\n    vi[Version incremented]\n    ta[Tag latest commit]\n    mbu([Main Branch updated])\n\n    mb --\"git checkout -b feature/dev\" --&gt; cdb\n    cdb --\"git add -A\\ngit commit -m 'my changes'\\ngit push origin feature/dev\" --&gt; ca\n    ca --\"Github: Make Pull Request\"--&gt; cr\n    cr --\"Accept changes\\nusethis::use_version(1.3.0)\\ngit add -A\\ngit commit -m 'incrementing to v1.3.0'\\ngit push origin feature/dev\"--&gt; vi\n    vi -- \"Pull request merged to main\" --&gt; mbu\n    cr --\"Reject changes\"--&gt; cdb\n    ta &lt;-.\"git tag 1234567 v1.3.0\\ngit push origin v1.3.0\".-&gt; mbu\n\n    linkStyle default stroke:lightgray"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project began in 2023."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About the Economic Inactivity Project",
    "section": "",
    "text": "This online handbook is intended to be a guide to understanding and using a modelling framework for simulating the effects of changes to determinants of economic inactivity to representative UK populations’ levels of economic inactivity, and so to estimating the contribution that specific factors have on the levels and types of economic activity and inactivity experienced by working populations in the UK."
  },
  {
    "objectID": "index.html#why-do-we-need-this-guidance",
    "href": "index.html#why-do-we-need-this-guidance",
    "title": "Guidance for developing PHS R Packages",
    "section": "Why do we need this guidance?",
    "text": "Why do we need this guidance?\nPHS is using POSIT Package Manager to host R packages (including PHS R packages) internally and this allows users of POSIT Workbench to install packages securely and simply using install.packages(). Versioning and tagging have implications on POSIT Package Manager, depending on how it has been set up for hosting PHS R packages which are being developed on Github. The desired result of developing packages according to this guidance is that users always have access to the latest stable release and are not missing out on any important developments when they install PHS R packages."
  },
  {
    "objectID": "index.html#who-is-this-guidance-for",
    "href": "index.html#who-is-this-guidance-for",
    "title": "Guidance for developing PHS R Packages",
    "section": "Who is this guidance for?",
    "text": "Who is this guidance for?\nThis guidance is for developers and maintainers of PHS R packages. It is also for those interested in developing PHS R packages or those that want to learn to do this. It is assumed that the reader has some pre-existing knowledge regarding Git and developing R packages."
  },
  {
    "objectID": "index.html#what-this-guidance-does-not-cover",
    "href": "index.html#what-this-guidance-does-not-cover",
    "title": "Guidance for developing PHS R Packages",
    "section": "What this guidance does not cover",
    "text": "What this guidance does not cover\nThis guidance only discusses particular aspects of R package development and Git and is not a general guide to either of these.\nFor a comprehensive guide to developing R packages, please see the R Packages book.\nTo learn more about Git, please see, for example, the Pro Git book, Happy Git and GitHub for the useR or git - the simple guide."
  },
  {
    "objectID": "pages/package-manager.html",
    "href": "pages/package-manager.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "There are two ways for Posit Package Manager to pick up updates from R packages on Github (not applicable to CRAN packages): tags or commits. Commits mode is based on all commits made to a Git branch, while tags mode is based on Git tags in the package repository.\n\nCommits: The package gets updated on Posit Package Manager each time a new commit is made to the specified branch. The package version is updated automatically with the commit time-stamp reflected at the end of the version number. This guarantees the version number for each new commit will be higher than the previous version number. E.g. phsstyles is on version 0.1.1, however the version number created by Posit Package Manager is 0.1.1.0.0.0.1654859281.\nTags: The package gets updated on Posit Package Manager each time a Git tag is used in the repository. The package version is defined in the package’s DESCRIPTION file, corresponding to the name of the tag. If two tags reference the same version, preference is given to the newer tag. If a newer tag references an older version than a prior tag, the new tag is built as an archived package. If a tag is removed from a Git endpoint, any packages already built for that tag remain.\n\nCommit mode is recommended when you only want users to have access to every individual update/commit made in a package, whereas tag mode is more suitable when you only want to expose stable releases of packages to users."
  },
  {
    "objectID": "pages/package-manager.html#posit-package-manager",
    "href": "pages/package-manager.html#posit-package-manager",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "There are two ways for Posit Package Manager to pick up updates from R packages on Github (not applicable to CRAN packages): tags or commits. Commits mode is based on all commits made to a Git branch, while tags mode is based on Git tags in the package repository.\n\nCommits: The package gets updated on Posit Package Manager each time a new commit is made to the specified branch. The package version is updated automatically with the commit time-stamp reflected at the end of the version number. This guarantees the version number for each new commit will be higher than the previous version number. E.g. phsstyles is on version 0.1.1, however the version number created by Posit Package Manager is 0.1.1.0.0.0.1654859281.\nTags: The package gets updated on Posit Package Manager each time a Git tag is used in the repository. The package version is defined in the package’s DESCRIPTION file, corresponding to the name of the tag. If two tags reference the same version, preference is given to the newer tag. If a newer tag references an older version than a prior tag, the new tag is built as an archived package. If a tag is removed from a Git endpoint, any packages already built for that tag remain.\n\nCommit mode is recommended when you only want users to have access to every individual update/commit made in a package, whereas tag mode is more suitable when you only want to expose stable releases of packages to users."
  },
  {
    "objectID": "pages/package-manager.html#package-manager-in-phs",
    "href": "pages/package-manager.html#package-manager-in-phs",
    "title": "PHS Package Development Guidance",
    "section": "Package Manager in PHS",
    "text": "Package Manager in PHS\nYou can check if the PHS POSIT Package Manager is using tags or commits for a particular package by searching the package name at https://ppm.publichealthscotland.org/client/#/repos/3/packages (the link can only be accessed when you are connected to the PHS network).\nIf we look at phsstyles on Package Manager, we can clearly see it is using commit mode (as of 27th June 2024) as the version number is long and looks auto-generated (0.1.1.0.0.0.1654859281)."
  },
  {
    "objectID": "pages/package-manager.html#advantages-and-disadvantages",
    "href": "pages/package-manager.html#advantages-and-disadvantages",
    "title": "PHS Package Development Guidance",
    "section": "Advantages and Disadvantages",
    "text": "Advantages and Disadvantages\nUsing commit mode on Package Manager to host an R package makes it easier for maintainers as they do not have to worry so much about how to version every update. The package maintainers would have to ensure (as far as possible) that only stable commits are made on the main branch. However, the disadvantage is that version history may be long (particularly if a number of small commits have been made) and storage space on the infrastructure used to host Package Manager is needed to store all source files. For example, phstemplates on Package Manager has a version created for every commit to the main branch:\nVERSION\n1.2.1.0.0.0.1719407970\n\nARCHIVED VERSIONS\n1.2.1.0.0.0.1718379552\nJun 14, 2024 3:39 PM UTC\n1.2.0.0.0.0.1707843561\nFeb 13, 2024 4:59 PM UTC\n1.1.1.0.0.0.1705940511\nJan 22, 2024 4:21 PM UTC\n1.1.1.0.0.0.1704882475\nJan 10, 2024 10:27 AM UTC\n1.1.1.0.0.0.1700760626\nNov 23, 2023 5:30 PM UTC\n1.1.1.0.0.0.1700647485\nNov 22, 2023 10:04 AM UTC\n1.1.1.0.0.0.1699616873\nNov 10, 2023 11:47 AM UTC\n1.1.1.0.0.0.1699351034\nNov 7, 2023 9:57 AM UTC\n1.1.1.0.0.0.1698952735\nNov 2, 2023 7:18 PM UTC\n1.1.1.0.0.0.1698157806\nOct 24, 2023 2:30 PM UTC\n1.1.1.0.0.0.1698053868\nOct 23, 2023 9:37 AM UTC\n1.1.1.0.0.0.1696581278\nOct 6, 2023 8:34 AM UTC\n1.1.1.0.0.0.1696322496\nOct 3, 2023 8:41 AM UTC\n1.1.1.0.0.0.1696251514\nOct 2, 2023 12:58 PM UTC\n1.1.0.0.0.0.1695820271\nSep 27, 2023 1:11 PM UTC\n1.1.0.0.0.0.1695805326\nSep 27, 2023 9:02 AM UTC\n1.1.0.0.0.0.1695735559\nSep 26, 2023 1:39 PM UTC\n1.1.0.0.0.0.1695658190\nSep 25, 2023 4:09 PM UTC\n1.1.0.0.0.0.1695206490\nSep 20, 2023 10:41 AM UTC\n1.1.0.0.0.0.1689262223\nJul 13, 2023 3:30 PM UTC\n1.1.0.0.0.0.1661965078\nAug 31, 2022 4:57 PM UTC\nAnother drawback with commit mode is that you would have to look at the commit history on Github to see exactly what changes were made for each of these versions. If a major bug was introduced at some point in the commit history, it could be challenging for a user to find and install the most recent stable version.\nTags mode requires more administrative work by maintainers of R packages (as an extra step is needed to associate commits with tags and to push these tags to Github) but should result in a cleaner version history on Package Manager. The deliberate tagging process should mean we get only a list of stable releases and changes in each version should have been clearly documented in news.md.\nIf Package Manager were to use tags mode for phstemplates, we would have only the latest v1.2.1 and three previous archived versions available, resulting in a lot fewer archived versions compared with commits mode.\n$ git tag\nv1.0.0\nv1.1.0\nv1.2.0\nv1.2.1\nThe benefit for users would be that it would be easier to install previous versions of a package if needed (for example, if the latest version introduced a bug). There should also be less versions created on Package Manager which would save some storage space on the infrastructure. Furthermore, these tags can be reviewed periodically and redundant versions can be deleted if desired."
  },
  {
    "objectID": "pages/package-manager.html#further-reading",
    "href": "pages/package-manager.html#further-reading",
    "title": "PHS Package Development Guidance",
    "section": "Further Reading",
    "text": "Further Reading\nBuilding Git Packages - Posit Package Manager"
  },
  {
    "objectID": "pages/r-package-versioning.html",
    "href": "pages/r-package-versioning.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "For PHS R packages, we recommend that package maintainers handle all versioning, following the tidyverse approach to versioning:\n\nUse the . separator rather than -.\nVersion number should always include the major, minor and patch number, e.g. 1.4.0.\nIncrement the major, the minor or patch number reflecting the changes made in the release. Taking the 1.4.0 example above, a patch release would increment to 1.4.1, a minor release to 1.5.0, a major release to 2.0.0\n\nThe version is set in the package’s DESCRIPTION file. This can be edited directly or by using the function usethis::use_version(). Some examples of what types of changes would be considered in each of the types of releases:\nPatch release: No breaking changes and no significant new features. For example, backward compatible bug fixes, addition of new unit tests, minor changes to documentation or vignettes and minor changes to a template.\nMinor release: New features / functionality or improvements introduced; all changes are backward compatible. Examples could include adding new arguments to functions (that remain backward compatible), introducing new functions (that are not critical to the overall functionality of the package), and efficiency improvements (these may also be considered for a patch release, depending on how important those efficiency improvements are).\nMajor release: Breaking changes (changes that are not backward compatible), changes likely to impact on many users. Significant new features or functions you want to highlight.\nSome questions to ask when deciding how to increment the version number for a new release include:\n\nAre there any breaking changes?\nIf the answer is yes, this should be a major release.\nAre there any changes to functionality (that are user-facing)?\nIf the answer is yes, the release should be minor or major.\n\nNote that it may not always be necessary to increment the version. For example, if only minor typos were fixed in documentation or if the changes were trivial, it may not be worth changing the version. The general guidelines for versioning should be followed as far as possible but it is inevitable that some personal judgement by the package maintainers needs to be exercised when considering how best to increment versions."
  },
  {
    "objectID": "pages/r-package-versioning.html#r-package-versioning",
    "href": "pages/r-package-versioning.html#r-package-versioning",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "For PHS R packages, we recommend that package maintainers handle all versioning, following the tidyverse approach to versioning:\n\nUse the . separator rather than -.\nVersion number should always include the major, minor and patch number, e.g. 1.4.0.\nIncrement the major, the minor or patch number reflecting the changes made in the release. Taking the 1.4.0 example above, a patch release would increment to 1.4.1, a minor release to 1.5.0, a major release to 2.0.0\n\nThe version is set in the package’s DESCRIPTION file. This can be edited directly or by using the function usethis::use_version(). Some examples of what types of changes would be considered in each of the types of releases:\nPatch release: No breaking changes and no significant new features. For example, backward compatible bug fixes, addition of new unit tests, minor changes to documentation or vignettes and minor changes to a template.\nMinor release: New features / functionality or improvements introduced; all changes are backward compatible. Examples could include adding new arguments to functions (that remain backward compatible), introducing new functions (that are not critical to the overall functionality of the package), and efficiency improvements (these may also be considered for a patch release, depending on how important those efficiency improvements are).\nMajor release: Breaking changes (changes that are not backward compatible), changes likely to impact on many users. Significant new features or functions you want to highlight.\nSome questions to ask when deciding how to increment the version number for a new release include:\n\nAre there any breaking changes?\nIf the answer is yes, this should be a major release.\nAre there any changes to functionality (that are user-facing)?\nIf the answer is yes, the release should be minor or major.\n\nNote that it may not always be necessary to increment the version. For example, if only minor typos were fixed in documentation or if the changes were trivial, it may not be worth changing the version. The general guidelines for versioning should be followed as far as possible but it is inevitable that some personal judgement by the package maintainers needs to be exercised when considering how best to increment versions."
  },
  {
    "objectID": "pages/r-package-versioning.html#in-development-versions",
    "href": "pages/r-package-versioning.html#in-development-versions",
    "title": "PHS Package Development Guidance",
    "section": "In-development Versions",
    "text": "In-development Versions\nDuring the initial development of a package, the package version can include a fourth number starting at: 0.0.0.9000. During this stage the package is not considered stable, things are expected to change at any point, which is why it is important for the version number to clearly signal that the package is in this development stage. The development version number may be incremented (e.g. 0.0.0.9000 to 0.0.0.9001) if there is a need to differentiate versions of the development version, although this is typically not necessary with every commit.\nOne advantage of using the fourth number like this for a development version is that it leaves all version options open for the next released version, i.e. it can be any of 0.0.1, 0.1.0 or 1.0.0. Note that the version 1.0.0 is generally used to communicate that the package is considered stable."
  },
  {
    "objectID": "pages/r-package-versioning.html#further-reading",
    "href": "pages/r-package-versioning.html#further-reading",
    "title": "PHS Package Development Guidance",
    "section": "Further Reading",
    "text": "Further Reading\nR Packages - Lifecycle\nSemantic Versioning\nX.Org Version Numbering Schemes\nManaging Releases with Semantic Versioning and Git Tags\nR Packages - DESCRIPTION"
  },
  {
    "objectID": "pages/data.html",
    "href": "pages/data.html",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "This section will discuss the data sources used and how to access them"
  },
  {
    "objectID": "pages/data.html#data",
    "href": "pages/data.html#data",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "This section will discuss the data sources used and how to access them"
  },
  {
    "objectID": "pages/data.html#ukhls",
    "href": "pages/data.html#ukhls",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "UKHLS",
    "text": "UKHLS\nThe main data source used is the UKHLS, which …"
  },
  {
    "objectID": "pages/data.html#ukhls---special-licence",
    "href": "pages/data.html#ukhls---special-licence",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "UKHLS - Special Licence",
    "text": "UKHLS - Special Licence\nDiscuss how to get the Special Licence and the data it contains"
  },
  {
    "objectID": "index.html#data-used",
    "href": "index.html#data-used",
    "title": "About the Economic Inactivity Project",
    "section": "Data Used",
    "text": "Data Used\nWe use the UKHLS."
  },
  {
    "objectID": "index.html#codebase",
    "href": "index.html#codebase",
    "title": "About the Economic Inactivity Project",
    "section": "Codebase",
    "text": "Codebase\nOur codebase is available here"
  },
  {
    "objectID": "pages/model-approach.html",
    "href": "pages/model-approach.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "We start by trying to adequately controlling for the following two types of factor:\n\nDemographic factors, such as age and sex\nEvent history: i.e. the current observed economic (in)activity status that persons are observed to occupy at a given time point"
  },
  {
    "objectID": "pages/model-approach.html#foundational-model",
    "href": "pages/model-approach.html#foundational-model",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "We start by trying to adequately controlling for the following two types of factor:\n\nDemographic factors, such as age and sex\nEvent history: i.e. the current observed economic (in)activity status that persons are observed to occupy at a given time point"
  },
  {
    "objectID": "pages/model-approach.html#extended-models",
    "href": "pages/model-approach.html#extended-models",
    "title": "PHS Package Development Guidance",
    "section": "Extended models",
    "text": "Extended models\nAn extended model adds one or more variables to the foundational model. These additional variables are the factors/determinants whose effect on economic (in)activity we are actually interested in estimating for both individuals and populations.\n\nHealth as a discrete and continuous variables\nThe health extended model adds the variable ’’ for"
  },
  {
    "objectID": "pages/registering-for-UKHLS-special-licence.html",
    "href": "pages/registering-for-UKHLS-special-licence.html",
    "title": "Economic (In)Activity Modelling Resourcesß",
    "section": "",
    "text": "To set up this project in the way expected by the package functions:\n\nRegister with the UK Data Archive\nFind and download the stata version of Study ID 6614, Understanding Society: Waves 1-13, 2009-2022 and Harmonised BHPS: Waves 1-18, 1991-2009\n\nThis is the publicly accessible version of the UKHLS, in which fields have been harmonised between waves, and which also includes records from the British Household Panel Survey (BHPS), which is the predecessor to Understanding Society\n\nUnzip the above file into the location big_data within this folder. Within this folder, make sure the unzipped data are within the folder UKDA-6614-stata.\n\nWithin UKDA-6615-stata, there should be the following files and folders:\n\n6614_file_information.rtf\nread6614.htm\nmrdoc, containing further documentation\nstata, containing the data files themselves\n\n\nOnce the data files are in the appropriate relative location, open up the RStudio project by double clicking on the economic_inactivity.rproj file, or selecting the project from within RStudio\nTo load the package, while within RStudio, run devtools::load_all(\".\") in the console. If devtools is installed correctly, you should also be able to run the above with the keyboard shortcut SHIFT + cmd/cntrl + L"
  },
  {
    "objectID": "pages/data.html#setting-up-repo-with-appropriate-data",
    "href": "pages/data.html#setting-up-repo-with-appropriate-data",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "Setting up repo with appropriate data",
    "text": "Setting up repo with appropriate data\nAfter cloning the project repository, the user will need to do the following to their local copy of the repository:\n\ncreate a folder in the root directory called big_data\nDownload the zipped file for UKHLS from the UK Data Archive which has the code 6614, and in stata format.\nUnzip this zipped file from the UKHLS and place it in the big_data directory. This should create a new folder called UKDA-6614-stata\n\nThe required UKDS UKHLS data should now be in the correct location for the functions within the project repository to work"
  },
  {
    "objectID": "pages/example-model-run.html",
    "href": "pages/example-model-run.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "This section will show typical code required to create the type of model used to project economic (in)activity states in the period ahead for individuals. This is assuming the repository have been cloned to a local directory and the requisite UKHLS dataset has been downloaded, unzipped and placed in the correct relative directory. The repository should be opened as an R Project in RStudio, and the package loaded to ensure the convenience functions are accessible.\nOnce the repository and data are set up correctly, the script below does the following:\n\nLoads the data from the UKHLS raw data\nSelects only those variables of interest\n\njbstat: economic (in)activity status\ndvage : age in years\nsex : sex\nsf12mcs_dv: SF-12 Mental Health Score component\nsf12pcs_dv: SF-12 Physical Health Score component\n\nCreates the foundational model with the following specification and calls it mod_00:\n\nnext_status ~ this_status * sex + splines::bs(age, 5)\n\nCreates four possible extended model specifications including health in different ways, and saves them as mod_01, mod_02, mod_03, mod_04\nCompares the penalised model fit of all five model specifications to determine if 1) any extended model specification out-performs the baseline specification; 2) which of the extended model specifications are ‘best’ according to the AIC and BIC metrics.\nProduces a hypothetical reference population based on the last pre-pandemic wave’s observations\nModifies the exposure variables of interest in the above to create a counterfactual population in which health has been improved\nProduces estimates of the effect that improving health has on the distribution of persons in different economic activity states\nSummarises these above estimates at population level\n\nThis example is largely lifted from this quarto notebook in the main project reposistory:\n\nlibrary(tidyverse)\n# library(haven)\n# library(here)\nlibrary(nnet)\n\n# devtools::load_all(here('R'))\n# base_dir_location &lt;- \"big_data/UKDA-6614-stata/stata/stata13_se/ukhls\"\n# indresp_files &lt;- dir(here(base_dir_location), pattern = \"[a-z]_indresp.dta\", full.names = TRUE)\n\nvarnames &lt;-  c(\n  \"jbstat\", \"dvage\", \"sex\", \"sf12mcs_dv\", \"sf12pcs_dv\" #, \"ethn_dv\"\n  )\n\nvartypes &lt;- c(\n  \"labels\", \"values\", \"labels\", \"values\", \"values\" #, \"labels\"\n  )\n\ndf_ind &lt;- get_ind_level_vars_for_selected_waves(varnames = varnames, vartypes = vartypes, waves = letters[1:11])\n\n# Clean the data \ndf_ind_mhph_standardised &lt;- \n  df_ind |&gt; \n    mutate(across(dvage:sf12pcs_dv, function(x) ifelse(x &lt; 0, NA, x))) %&gt;% \n    filter(complete.cases(.)) |&gt; \n    rename(age = dvage) |&gt; \n    filter(between(age, 16, 64)) |&gt; \n    group_by(wave) |&gt; \n    mutate(z_mh = standardise_scores(sf12mcs_dv),\n           z_ph = standardise_scores(sf12pcs_dv)\n    ) |&gt; \n    ungroup() |&gt; \n    select(-sf12mcs_dv, -sf12pcs_dv)\nBuild the model\nmod_00 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5),\n    data = df_ind_mhph_standardised\n  )\n\nmod_01 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh,\n    data = df_ind_mhph_standardised\n  )\n\nmod_02 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_03 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_04 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh * z_ph,\n    data = df_ind_mhph_standardised\n  )\nCompare penalised fit\nBIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nAIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nUsing status(T+1) regressed on status(T), and using the working age population only, the interacting joint model now has the lowest BIC and AIC.\nOf the single exposure models, the PH model has superior fit to the MH model.\nLet’s now pick a wave. How about j again?\n\nbaseline_scenario &lt;- df_ind_mhph_standardised |&gt; \n  filter(wave == 'j')\n\ncounterfactual_mh &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1)\n\ncounterfactual_ph &lt;- baseline_scenario |&gt; \n  mutate(z_ph = z_ph + 1)\n\ncounterfactual_mhph &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1, z_ph = z_ph + 1)\nNow to get predictions\npredictions_baseline &lt;- predict(mod_04, newdata = baseline_scenario, type = \"probs\")\npredictions_counter_mh &lt;- predict(mod_04, newdata = counterfactual_mh, type = \"probs\")\npredictions_counter_ph &lt;- predict(mod_04, newdata = counterfactual_ph, type = \"probs\")\npredictions_counter_mhph &lt;- predict(mod_04, newdata = counterfactual_mhph, type = \"probs\")\n\nFor each of these we can sum the rows to get the estimated next_status composition\n\npredictions_summary_matrix &lt;-\n  \n  cbind(\n    # The number 2 indicates do the sum function for each column.\n    # If it were 1 then this would sum for each row (which should add up to 1 in call cases)\n    apply(predictions_baseline, 2, sum),\n    apply(predictions_counter_mh, 2, sum),\n    apply(predictions_counter_ph, 2, sum),\n    apply(predictions_counter_mhph, 2, sum)\n  )\n\ncolnames(predictions_summary_matrix) &lt;- c(\"base\", \"mh\", \"ph\", \"mh_ph\")\npredictions_summary_matrix\nWe can make these relative to the baseline model\nsim_relative_change &lt;- apply(\n    predictions_summary_matrix, 1, function(x) (100 * x / x[1])\n  ) |&gt; \n  t()\n\nsim_relative_change\nLet’s try to visualise this\nsim_relative_change |&gt; \n  as_tibble(rownames = \"state\") |&gt; \n  pivot_longer(-state, names_to = \"scenario\", values_to = \"relative_size\") |&gt; \n  ggplot(aes(y = state, x = relative_size, shape = scenario, colour = scenario)) + \n  geom_point() + \n  ggrepel::geom_text_repel(aes(label = round(relative_size)), nudge_y = 0.2) + \n  geom_vline(xintercept = 100, linetype = \"dashed\") + \n  labs(\n    x = \"Size of population in state relative to baseline (100)\",\n    y = \"Economic (in)activity state\",\n    title = \"Estimated effect of mitigating mental health and physical health\",\n    subtitle = \"Using wave J. SF-12 MH and PH instruments.\",\n    caption = \"Source: UKHLS. Mitigation scenario: Improve scores by 1 standard deviation\"\n  )"
  },
  {
    "objectID": "pages/example-model-run.html#example-workflow-for-creating-a-model",
    "href": "pages/example-model-run.html#example-workflow-for-creating-a-model",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "This section will show typical code required to create the type of model used to project economic (in)activity states in the period ahead for individuals. This is assuming the repository have been cloned to a local directory and the requisite UKHLS dataset has been downloaded, unzipped and placed in the correct relative directory. The repository should be opened as an R Project in RStudio, and the package loaded to ensure the convenience functions are accessible.\nOnce the repository and data are set up correctly, the script below does the following:\n\nLoads the data from the UKHLS raw data\nSelects only those variables of interest\n\njbstat: economic (in)activity status\ndvage : age in years\nsex : sex\nsf12mcs_dv: SF-12 Mental Health Score component\nsf12pcs_dv: SF-12 Physical Health Score component\n\nCreates the foundational model with the following specification and calls it mod_00:\n\nnext_status ~ this_status * sex + splines::bs(age, 5)\n\nCreates four possible extended model specifications including health in different ways, and saves them as mod_01, mod_02, mod_03, mod_04\nCompares the penalised model fit of all five model specifications to determine if 1) any extended model specification out-performs the baseline specification; 2) which of the extended model specifications are ‘best’ according to the AIC and BIC metrics.\nProduces a hypothetical reference population based on the last pre-pandemic wave’s observations\nModifies the exposure variables of interest in the above to create a counterfactual population in which health has been improved\nProduces estimates of the effect that improving health has on the distribution of persons in different economic activity states\nSummarises these above estimates at population level\n\nThis example is largely lifted from this quarto notebook in the main project reposistory:\n\nlibrary(tidyverse)\n# library(haven)\n# library(here)\nlibrary(nnet)\n\n# devtools::load_all(here('R'))\n# base_dir_location &lt;- \"big_data/UKDA-6614-stata/stata/stata13_se/ukhls\"\n# indresp_files &lt;- dir(here(base_dir_location), pattern = \"[a-z]_indresp.dta\", full.names = TRUE)\n\nvarnames &lt;-  c(\n  \"jbstat\", \"dvage\", \"sex\", \"sf12mcs_dv\", \"sf12pcs_dv\" #, \"ethn_dv\"\n  )\n\nvartypes &lt;- c(\n  \"labels\", \"values\", \"labels\", \"values\", \"values\" #, \"labels\"\n  )\n\ndf_ind &lt;- get_ind_level_vars_for_selected_waves(varnames = varnames, vartypes = vartypes, waves = letters[1:11])\n\n# Clean the data \ndf_ind_mhph_standardised &lt;- \n  df_ind |&gt; \n    mutate(across(dvage:sf12pcs_dv, function(x) ifelse(x &lt; 0, NA, x))) %&gt;% \n    filter(complete.cases(.)) |&gt; \n    rename(age = dvage) |&gt; \n    filter(between(age, 16, 64)) |&gt; \n    group_by(wave) |&gt; \n    mutate(z_mh = standardise_scores(sf12mcs_dv),\n           z_ph = standardise_scores(sf12pcs_dv)\n    ) |&gt; \n    ungroup() |&gt; \n    select(-sf12mcs_dv, -sf12pcs_dv)\nBuild the model\nmod_00 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5),\n    data = df_ind_mhph_standardised\n  )\n\nmod_01 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh,\n    data = df_ind_mhph_standardised\n  )\n\nmod_02 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_03 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_04 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh * z_ph,\n    data = df_ind_mhph_standardised\n  )\nCompare penalised fit\nBIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nAIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nUsing status(T+1) regressed on status(T), and using the working age population only, the interacting joint model now has the lowest BIC and AIC.\nOf the single exposure models, the PH model has superior fit to the MH model.\nLet’s now pick a wave. How about j again?\n\nbaseline_scenario &lt;- df_ind_mhph_standardised |&gt; \n  filter(wave == 'j')\n\ncounterfactual_mh &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1)\n\ncounterfactual_ph &lt;- baseline_scenario |&gt; \n  mutate(z_ph = z_ph + 1)\n\ncounterfactual_mhph &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1, z_ph = z_ph + 1)\nNow to get predictions\npredictions_baseline &lt;- predict(mod_04, newdata = baseline_scenario, type = \"probs\")\npredictions_counter_mh &lt;- predict(mod_04, newdata = counterfactual_mh, type = \"probs\")\npredictions_counter_ph &lt;- predict(mod_04, newdata = counterfactual_ph, type = \"probs\")\npredictions_counter_mhph &lt;- predict(mod_04, newdata = counterfactual_mhph, type = \"probs\")\n\nFor each of these we can sum the rows to get the estimated next_status composition\n\npredictions_summary_matrix &lt;-\n  \n  cbind(\n    # The number 2 indicates do the sum function for each column.\n    # If it were 1 then this would sum for each row (which should add up to 1 in call cases)\n    apply(predictions_baseline, 2, sum),\n    apply(predictions_counter_mh, 2, sum),\n    apply(predictions_counter_ph, 2, sum),\n    apply(predictions_counter_mhph, 2, sum)\n  )\n\ncolnames(predictions_summary_matrix) &lt;- c(\"base\", \"mh\", \"ph\", \"mh_ph\")\npredictions_summary_matrix\nWe can make these relative to the baseline model\nsim_relative_change &lt;- apply(\n    predictions_summary_matrix, 1, function(x) (100 * x / x[1])\n  ) |&gt; \n  t()\n\nsim_relative_change\nLet’s try to visualise this\nsim_relative_change |&gt; \n  as_tibble(rownames = \"state\") |&gt; \n  pivot_longer(-state, names_to = \"scenario\", values_to = \"relative_size\") |&gt; \n  ggplot(aes(y = state, x = relative_size, shape = scenario, colour = scenario)) + \n  geom_point() + \n  ggrepel::geom_text_repel(aes(label = round(relative_size)), nudge_y = 0.2) + \n  geom_vline(xintercept = 100, linetype = \"dashed\") + \n  labs(\n    x = \"Size of population in state relative to baseline (100)\",\n    y = \"Economic (in)activity state\",\n    title = \"Estimated effect of mitigating mental health and physical health\",\n    subtitle = \"Using wave J. SF-12 MH and PH instruments.\",\n    caption = \"Source: UKHLS. Mitigation scenario: Improve scores by 1 standard deviation\"\n  )"
  },
  {
    "objectID": "pages/model-repository.html",
    "href": "pages/model-repository.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "The code required to work with the UKHLS data required by the model, and other code which actually runs the model, is available from this repository.\n\n\nThe repository is set up as a package, with code required to reshape the UKHLS data into the required format available in the R subdirectory here.\nFunctions within this above link and their purposes are as follows:\n\nmodel_helpers.R\n\ncalculate_absolute_baseline_counterfactual_distribution\ncalculate_baseline_counterfactual_distribution\nplot_scenario_comparisons\nmake_abs_colchart\nmake_rel_barchart\nmake_tabular_summary\n\nukhls_data_extractors.R\n\nconvert_varname_selection_to_regex\nextract_vars_and_make_long\nextract_var_and_make_long\nread_and_slim_data\nextract_eq_income_and_num_dependents\nextract_pid_with_hid_and_wave\n\nukhls_data_reshapers.R\n\nsmartly_widen_ind_dataframe\nrename_widen\nextract_ind_from_waves\nsimplify_econ_status_categories\npull_next_wave_status\nget_econ_status_next_wave_and_match_pidp\nget_ind_level_vars_for_selected_waves\nadd_hh_variables\n\nukhls_helpers.R\n\nreturn_labels_as_factors\nget_col_labels\nget_labels_for_col\nstandardise_scores\n\n\nEach function is documented, and if the package is installed/loaded then help for each function should be accessible by writing (for example) ?standardise_scores (for this named function)"
  },
  {
    "objectID": "pages/model-repository.html#model-repository",
    "href": "pages/model-repository.html#model-repository",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "The code required to work with the UKHLS data required by the model, and other code which actually runs the model, is available from this repository.\n\n\nThe repository is set up as a package, with code required to reshape the UKHLS data into the required format available in the R subdirectory here.\nFunctions within this above link and their purposes are as follows:\n\nmodel_helpers.R\n\ncalculate_absolute_baseline_counterfactual_distribution\ncalculate_baseline_counterfactual_distribution\nplot_scenario_comparisons\nmake_abs_colchart\nmake_rel_barchart\nmake_tabular_summary\n\nukhls_data_extractors.R\n\nconvert_varname_selection_to_regex\nextract_vars_and_make_long\nextract_var_and_make_long\nread_and_slim_data\nextract_eq_income_and_num_dependents\nextract_pid_with_hid_and_wave\n\nukhls_data_reshapers.R\n\nsmartly_widen_ind_dataframe\nrename_widen\nextract_ind_from_waves\nsimplify_econ_status_categories\npull_next_wave_status\nget_econ_status_next_wave_and_match_pidp\nget_ind_level_vars_for_selected_waves\nadd_hh_variables\n\nukhls_helpers.R\n\nreturn_labels_as_factors\nget_col_labels\nget_labels_for_col\nstandardise_scores\n\n\nEach function is documented, and if the package is installed/loaded then help for each function should be accessible by writing (for example) ?standardise_scores (for this named function)"
  },
  {
    "objectID": "pages/code-examples/health-continuous.html",
    "href": "pages/code-examples/health-continuous.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "This section will show typical code required to create the type of model used to project economic (in)activity states in the period ahead for individuals. This is assuming the repository have been cloned to a local directory and the requisite UKHLS dataset has been downloaded, unzipped and placed in the correct relative directory. The repository should be opened as an R Project in RStudio, and the package loaded to ensure the convenience functions are accessible.\nOnce the repository and data are set up correctly, the script below does the following:\n\nLoads the data from the UKHLS raw data\nSelects only those variables of interest\n\njbstat: economic (in)activity status\ndvage : age in years\nsex : sex\nsf12mcs_dv: SF-12 Mental Health Score component\nsf12pcs_dv: SF-12 Physical Health Score component\n\nCreates the foundational model with the following specification and calls it mod_00:\n\nnext_status ~ this_status * sex + splines::bs(age, 5)\n\nCreates four possible extended model specifications including health in different ways, and saves them as mod_01, mod_02, mod_03, mod_04\nCompares the penalised model fit of all five model specifications to determine if 1) any extended model specification out-performs the baseline specification; 2) which of the extended model specifications are ‘best’ according to the AIC and BIC metrics.\nProduces a hypothetical reference population based on the last pre-pandemic wave’s observations\nModifies the exposure variables of interest in the above to create a counterfactual population in which health has been improved\nProduces estimates of the effect that improving health has on the distribution of persons in different economic activity states\nSummarises these above estimates at population level\n\nThis example is largely lifted from this quarto notebook in the main project reposistory:\n\nlibrary(tidyverse)\n# library(haven)\n# library(here)\nlibrary(nnet)\n\n# devtools::load_all(here('R'))\n# base_dir_location &lt;- \"big_data/UKDA-6614-stata/stata/stata13_se/ukhls\"\n# indresp_files &lt;- dir(here(base_dir_location), pattern = \"[a-z]_indresp.dta\", full.names = TRUE)\n\nvarnames &lt;-  c(\n  \"jbstat\", \"dvage\", \"sex\", \"sf12mcs_dv\", \"sf12pcs_dv\" #, \"ethn_dv\"\n  )\n\nvartypes &lt;- c(\n  \"labels\", \"values\", \"labels\", \"values\", \"values\" #, \"labels\"\n  )\n\ndf_ind &lt;- get_ind_level_vars_for_selected_waves(varnames = varnames, vartypes = vartypes, waves = letters[1:11])\n\n# Clean the data \ndf_ind_mhph_standardised &lt;- \n  df_ind |&gt; \n    mutate(across(dvage:sf12pcs_dv, function(x) ifelse(x &lt; 0, NA, x))) %&gt;% \n    filter(complete.cases(.)) |&gt; \n    rename(age = dvage) |&gt; \n    filter(between(age, 16, 64)) |&gt; \n    group_by(wave) |&gt; \n    mutate(z_mh = standardise_scores(sf12mcs_dv),\n           z_ph = standardise_scores(sf12pcs_dv)\n    ) |&gt; \n    ungroup() |&gt; \n    select(-sf12mcs_dv, -sf12pcs_dv)\nBuild the model\nmod_00 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5),\n    data = df_ind_mhph_standardised\n  )\n\nmod_01 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh,\n    data = df_ind_mhph_standardised\n  )\n\nmod_02 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_03 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_04 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh * z_ph,\n    data = df_ind_mhph_standardised\n  )\nCompare penalised fit\nBIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nAIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nUsing status(T+1) regressed on status(T), and using the working age population only, the interacting joint model now has the lowest BIC and AIC.\nOf the single exposure models, the PH model has superior fit to the MH model.\nLet’s now pick a wave. How about j again?\n\nbaseline_scenario &lt;- df_ind_mhph_standardised |&gt; \n  filter(wave == 'j')\n\ncounterfactual_mh &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1)\n\ncounterfactual_ph &lt;- baseline_scenario |&gt; \n  mutate(z_ph = z_ph + 1)\n\ncounterfactual_mhph &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1, z_ph = z_ph + 1)\nNow to get predictions\npredictions_baseline &lt;- predict(mod_04, newdata = baseline_scenario, type = \"probs\")\npredictions_counter_mh &lt;- predict(mod_04, newdata = counterfactual_mh, type = \"probs\")\npredictions_counter_ph &lt;- predict(mod_04, newdata = counterfactual_ph, type = \"probs\")\npredictions_counter_mhph &lt;- predict(mod_04, newdata = counterfactual_mhph, type = \"probs\")\n\nFor each of these we can sum the rows to get the estimated next_status composition\n\npredictions_summary_matrix &lt;-\n  \n  cbind(\n    # The number 2 indicates do the sum function for each column.\n    # If it were 1 then this would sum for each row (which should add up to 1 in call cases)\n    apply(predictions_baseline, 2, sum),\n    apply(predictions_counter_mh, 2, sum),\n    apply(predictions_counter_ph, 2, sum),\n    apply(predictions_counter_mhph, 2, sum)\n  )\n\ncolnames(predictions_summary_matrix) &lt;- c(\"base\", \"mh\", \"ph\", \"mh_ph\")\npredictions_summary_matrix\nWe can make these relative to the baseline model\nsim_relative_change &lt;- apply(\n    predictions_summary_matrix, 1, function(x) (100 * x / x[1])\n  ) |&gt; \n  t()\n\nsim_relative_change\nLet’s try to visualise this\nsim_relative_change |&gt; \n  as_tibble(rownames = \"state\") |&gt; \n  pivot_longer(-state, names_to = \"scenario\", values_to = \"relative_size\") |&gt; \n  ggplot(aes(y = state, x = relative_size, shape = scenario, colour = scenario)) + \n  geom_point() + \n  ggrepel::geom_text_repel(aes(label = round(relative_size)), nudge_y = 0.2) + \n  geom_vline(xintercept = 100, linetype = \"dashed\") + \n  labs(\n    x = \"Size of population in state relative to baseline (100)\",\n    y = \"Economic (in)activity state\",\n    title = \"Estimated effect of mitigating mental health and physical health\",\n    subtitle = \"Using wave J. SF-12 MH and PH instruments.\",\n    caption = \"Source: UKHLS. Mitigation scenario: Improve scores by 1 standard deviation\"\n  )"
  },
  {
    "objectID": "pages/code-examples/health-continuous.html#example-workflow-for-creating-a-model",
    "href": "pages/code-examples/health-continuous.html#example-workflow-for-creating-a-model",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "This section will show typical code required to create the type of model used to project economic (in)activity states in the period ahead for individuals. This is assuming the repository have been cloned to a local directory and the requisite UKHLS dataset has been downloaded, unzipped and placed in the correct relative directory. The repository should be opened as an R Project in RStudio, and the package loaded to ensure the convenience functions are accessible.\nOnce the repository and data are set up correctly, the script below does the following:\n\nLoads the data from the UKHLS raw data\nSelects only those variables of interest\n\njbstat: economic (in)activity status\ndvage : age in years\nsex : sex\nsf12mcs_dv: SF-12 Mental Health Score component\nsf12pcs_dv: SF-12 Physical Health Score component\n\nCreates the foundational model with the following specification and calls it mod_00:\n\nnext_status ~ this_status * sex + splines::bs(age, 5)\n\nCreates four possible extended model specifications including health in different ways, and saves them as mod_01, mod_02, mod_03, mod_04\nCompares the penalised model fit of all five model specifications to determine if 1) any extended model specification out-performs the baseline specification; 2) which of the extended model specifications are ‘best’ according to the AIC and BIC metrics.\nProduces a hypothetical reference population based on the last pre-pandemic wave’s observations\nModifies the exposure variables of interest in the above to create a counterfactual population in which health has been improved\nProduces estimates of the effect that improving health has on the distribution of persons in different economic activity states\nSummarises these above estimates at population level\n\nThis example is largely lifted from this quarto notebook in the main project reposistory:\n\nlibrary(tidyverse)\n# library(haven)\n# library(here)\nlibrary(nnet)\n\n# devtools::load_all(here('R'))\n# base_dir_location &lt;- \"big_data/UKDA-6614-stata/stata/stata13_se/ukhls\"\n# indresp_files &lt;- dir(here(base_dir_location), pattern = \"[a-z]_indresp.dta\", full.names = TRUE)\n\nvarnames &lt;-  c(\n  \"jbstat\", \"dvage\", \"sex\", \"sf12mcs_dv\", \"sf12pcs_dv\" #, \"ethn_dv\"\n  )\n\nvartypes &lt;- c(\n  \"labels\", \"values\", \"labels\", \"values\", \"values\" #, \"labels\"\n  )\n\ndf_ind &lt;- get_ind_level_vars_for_selected_waves(varnames = varnames, vartypes = vartypes, waves = letters[1:11])\n\n# Clean the data \ndf_ind_mhph_standardised &lt;- \n  df_ind |&gt; \n    mutate(across(dvage:sf12pcs_dv, function(x) ifelse(x &lt; 0, NA, x))) %&gt;% \n    filter(complete.cases(.)) |&gt; \n    rename(age = dvage) |&gt; \n    filter(between(age, 16, 64)) |&gt; \n    group_by(wave) |&gt; \n    mutate(z_mh = standardise_scores(sf12mcs_dv),\n           z_ph = standardise_scores(sf12pcs_dv)\n    ) |&gt; \n    ungroup() |&gt; \n    select(-sf12mcs_dv, -sf12pcs_dv)\nBuild the model\nmod_00 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5),\n    data = df_ind_mhph_standardised\n  )\n\nmod_01 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh,\n    data = df_ind_mhph_standardised\n  )\n\nmod_02 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_03 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh + z_ph,\n    data = df_ind_mhph_standardised\n  )\n\nmod_04 &lt;- \n  nnet::multinom(\n    next_status ~ this_status * sex + splines::bs(age, 5) + z_mh * z_ph,\n    data = df_ind_mhph_standardised\n  )\nCompare penalised fit\nBIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nAIC(mod_00, mod_01, mod_02, mod_03, mod_04)\nUsing status(T+1) regressed on status(T), and using the working age population only, the interacting joint model now has the lowest BIC and AIC.\nOf the single exposure models, the PH model has superior fit to the MH model.\nLet’s now pick a wave. How about j again?\n\nbaseline_scenario &lt;- df_ind_mhph_standardised |&gt; \n  filter(wave == 'j')\n\ncounterfactual_mh &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1)\n\ncounterfactual_ph &lt;- baseline_scenario |&gt; \n  mutate(z_ph = z_ph + 1)\n\ncounterfactual_mhph &lt;- baseline_scenario |&gt; \n  mutate(z_mh = z_mh + 1, z_ph = z_ph + 1)\nNow to get predictions\npredictions_baseline &lt;- predict(mod_04, newdata = baseline_scenario, type = \"probs\")\npredictions_counter_mh &lt;- predict(mod_04, newdata = counterfactual_mh, type = \"probs\")\npredictions_counter_ph &lt;- predict(mod_04, newdata = counterfactual_ph, type = \"probs\")\npredictions_counter_mhph &lt;- predict(mod_04, newdata = counterfactual_mhph, type = \"probs\")\n\nFor each of these we can sum the rows to get the estimated next_status composition\n\npredictions_summary_matrix &lt;-\n  \n  cbind(\n    # The number 2 indicates do the sum function for each column.\n    # If it were 1 then this would sum for each row (which should add up to 1 in call cases)\n    apply(predictions_baseline, 2, sum),\n    apply(predictions_counter_mh, 2, sum),\n    apply(predictions_counter_ph, 2, sum),\n    apply(predictions_counter_mhph, 2, sum)\n  )\n\ncolnames(predictions_summary_matrix) &lt;- c(\"base\", \"mh\", \"ph\", \"mh_ph\")\npredictions_summary_matrix\nWe can make these relative to the baseline model\nsim_relative_change &lt;- apply(\n    predictions_summary_matrix, 1, function(x) (100 * x / x[1])\n  ) |&gt; \n  t()\n\nsim_relative_change\nLet’s try to visualise this\nsim_relative_change |&gt; \n  as_tibble(rownames = \"state\") |&gt; \n  pivot_longer(-state, names_to = \"scenario\", values_to = \"relative_size\") |&gt; \n  ggplot(aes(y = state, x = relative_size, shape = scenario, colour = scenario)) + \n  geom_point() + \n  ggrepel::geom_text_repel(aes(label = round(relative_size)), nudge_y = 0.2) + \n  geom_vline(xintercept = 100, linetype = \"dashed\") + \n  labs(\n    x = \"Size of population in state relative to baseline (100)\",\n    y = \"Economic (in)activity state\",\n    title = \"Estimated effect of mitigating mental health and physical health\",\n    subtitle = \"Using wave J. SF-12 MH and PH instruments.\",\n    caption = \"Source: UKHLS. Mitigation scenario: Improve scores by 1 standard deviation\"\n  )"
  },
  {
    "objectID": "pages/econ-activity-categories.html",
    "href": "pages/econ-activity-categories.html",
    "title": "Creating consistent economic activity categories between waves",
    "section": "",
    "text": "Creating consistent economic activity categories between waves\nWe cleaned the data and"
  },
  {
    "objectID": "pages/code-examples/building-foundational-model.html",
    "href": "pages/code-examples/building-foundational-model.html",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "Placeholder text"
  },
  {
    "objectID": "pages/code-examples/building-foundational-model.html#building-the-foundational-model",
    "href": "pages/code-examples/building-foundational-model.html#building-the-foundational-model",
    "title": "PHS Package Development Guidance",
    "section": "",
    "text": "Placeholder text"
  },
  {
    "objectID": "index.html#primary-aim-of-project",
    "href": "index.html#primary-aim-of-project",
    "title": "About the Economic Inactivity Project",
    "section": "Primary aim of project",
    "text": "Primary aim of project\nThe main aim of the project is to come up with reasonable estimates to questions of the form:\n\nHow much of the observed economic (in)activity in the UK population is due to one or more specific and potentially modifiable factors?\n\nThis is in effect asking for calculation of population attributable fractions (PAFs) and sequential attributable fractions (SAFs). For example:\n\nHow much sickness related economic inactivity is explained by poor health?\n\n\nHow much unemployment is explained by poor work conditions?\n\n\nHow much employment is explained by job density?"
  },
  {
    "objectID": "pages/working-papers.html",
    "href": "pages/working-papers.html",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "Methods paper\nQuarto presentation"
  },
  {
    "objectID": "pages/working-papers.html#working-papers-and-presentations",
    "href": "pages/working-papers.html#working-papers-and-presentations",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "Methods paper\nQuarto presentation"
  },
  {
    "objectID": "about.html#collaborators",
    "href": "about.html#collaborators",
    "title": "About",
    "section": "Collaborators",
    "text": "Collaborators\nThe main project members include:\n\nJon Minton\n\nDebs Shipton\nAndy Pulford\nMartin Taulbut. (Email. Internal page)\nRobert Atkinson\nRachel McAdams\nMel Bridgewood\n\nIt links with the Fair Work and Employability Sub-team."
  },
  {
    "objectID": "pages/concepts/economic-inactivity.html",
    "href": "pages/concepts/economic-inactivity.html",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "Text here"
  },
  {
    "objectID": "pages/concepts/economic-inactivity.html#economic-activity-and-inactivity",
    "href": "pages/concepts/economic-inactivity.html#economic-activity-and-inactivity",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "Text here"
  },
  {
    "objectID": "pages/concepts/pafs-and-safs.html",
    "href": "pages/concepts/pafs-and-safs.html",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "text\n\n\ntext\n\n\n\ntext"
  },
  {
    "objectID": "pages/concepts/pafs-and-safs.html#pafs-and-safs",
    "href": "pages/concepts/pafs-and-safs.html#pafs-and-safs",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "text\n\n\ntext\n\n\n\ntext"
  },
  {
    "objectID": "pages/what-else-is-happening.html",
    "href": "pages/what-else-is-happening.html",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "Scottish Government Literature Review PHS Literature Review (led by Graeme Scobie) Slidepack - what PHS knows and doesn’t know (led by Mel Bridgwood) Strategic Overview of Economic Inactivity (led by Debs Shipton)"
  },
  {
    "objectID": "pages/what-else-is-happening.html#what-else-is-happening",
    "href": "pages/what-else-is-happening.html#what-else-is-happening",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "Scottish Government Literature Review PHS Literature Review (led by Graeme Scobie) Slidepack - what PHS knows and doesn’t know (led by Mel Bridgwood) Strategic Overview of Economic Inactivity (led by Debs Shipton)"
  },
  {
    "objectID": "pages/code-examples/getting-descriptive-results-ukhls.html",
    "href": "pages/code-examples/getting-descriptive-results-ukhls.html",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "The following shows some descriptive statistics from the UKHLS for waves a and i.\n\n\nCode\nlibrary(tidyverse)\n\ndf &lt;- read_csv(\"../../assets/csv/summary_stats.csv\")\n\ndf |&gt;\n    knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n…1\nwave\nthis_status\nprop_men\nprop_women\nmean_age\nmedian_age\nmean_mh\nmean_ph\nprop_nw\nmedian_numcars\nmean_numcars\nmean_hascar\nmean_eq_hh_income\nmedian_eq_hh_income\nprop_children\nprop_lti\n\n\n\n\n1\na\nEmployed\n0.4949194\n0.5050806\n40.70093\n41\n51.25012\n52.99948\n0.2078241\n1\n1.5353490\n0.8826428\n1745.7314\n1510.0000\n0.4796963\n0.2468873\n\n\n2\na\nInactive care\n0.0412518\n0.9587482\n38.24637\n37\n47.60860\n50.02591\n0.4179232\n1\n1.0529915\n0.7116809\n1035.0761\n839.7333\n0.8244666\n0.2949230\n\n\n3\na\nInactive long term sick\n0.5018528\n0.4981472\n48.00106\n50\n38.39359\n30.05688\n0.1997880\n1\n0.7101219\n0.5442501\n972.3600\n878.2266\n0.3006882\n0.9697131\n\n\n4\na\nInactive other\n0.4437299\n0.5562701\n37.73633\n39\n47.71277\n50.92335\n0.2893891\n1\n1.1229773\n0.6990291\n1091.7166\n840.0000\n0.5241158\n0.3786408\n\n\n5\na\nInactive retired\n0.3504823\n0.6495177\n60.95269\n62\n51.92955\n45.44033\n0.0781250\n1\n1.3491260\n0.8495860\n1403.6533\n1154.4100\n0.0514469\n0.5526921\n\n\n6\na\nInactive student\n0.4757917\n0.5242083\n20.29233\n18\n51.71938\n54.68187\n0.4268516\n1\n1.2362536\n0.7003420\n1101.5285\n924.4520\n0.6736456\n0.1257862\n\n\n7\na\nUnemployed\n0.5661787\n0.4338213\n35.78428\n34\n46.66679\n51.10128\n0.3501794\n1\n0.7587035\n0.5330132\n838.1079\n739.4296\n0.5123992\n0.3266407\n\n\n8\ni\nEmployed\n0.4769168\n0.5230832\n42.48786\n44\n48.51051\n52.68522\n0.2082216\n2\n1.7247441\n0.9063847\n2166.9771\n1831.2757\n0.4646034\n0.2394120\n\n\n9\ni\nInactive care\n0.0624585\n0.9375415\n42.60000\n42\n45.57478\n48.61528\n0.4371257\n1\n1.3308519\n0.8023160\n1340.2393\n1100.8120\n0.7711340\n0.3579508\n\n\n10\ni\nInactive long term sick\n0.4402036\n0.5597964\n48.70059\n52\n34.78817\n30.53564\n0.2076596\n1\n0.8240000\n0.5691429\n1700.6061\n1263.1200\n0.2625216\n0.9796265\n\n\n11\ni\nInactive other\n0.3856502\n0.6143498\n39.84305\n43\n44.98219\n50.06985\n0.2645740\n1\n1.3733333\n0.8333333\n1667.2382\n1356.3400\n0.4000000\n0.4099099\n\n\n12\ni\nInactive retired\n0.4169207\n0.5830793\n60.80259\n62\n51.13216\n46.54959\n0.1153552\n2\n1.6396677\n0.9096573\n1962.5151\n1698.3350\n0.0725869\n0.4656489\n\n\n13\ni\nInactive student\n0.4410163\n0.5589837\n19.58031\n18\n45.83370\n55.33526\n0.3866424\n2\n1.6169823\n0.8399511\n1585.6448\n1375.2226\n0.7398374\n0.1710646\n\n\n14\ni\nUnemployed\n0.4838478\n0.5161522\n37.39411\n36\n42.74357\n48.76011\n0.3640288\n1\n1.0920188\n0.6704225\n1179.2002\n1028.7872\n0.4766917\n0.4135447"
  },
  {
    "objectID": "pages/code-examples/getting-descriptive-results-ukhls.html#descriptive-statistics-from-the-ukhls",
    "href": "pages/code-examples/getting-descriptive-results-ukhls.html#descriptive-statistics-from-the-ukhls",
    "title": "Economic (In)Activity Modelling Resources",
    "section": "",
    "text": "The following shows some descriptive statistics from the UKHLS for waves a and i.\n\n\nCode\nlibrary(tidyverse)\n\ndf &lt;- read_csv(\"../../assets/csv/summary_stats.csv\")\n\ndf |&gt;\n    knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n…1\nwave\nthis_status\nprop_men\nprop_women\nmean_age\nmedian_age\nmean_mh\nmean_ph\nprop_nw\nmedian_numcars\nmean_numcars\nmean_hascar\nmean_eq_hh_income\nmedian_eq_hh_income\nprop_children\nprop_lti\n\n\n\n\n1\na\nEmployed\n0.4949194\n0.5050806\n40.70093\n41\n51.25012\n52.99948\n0.2078241\n1\n1.5353490\n0.8826428\n1745.7314\n1510.0000\n0.4796963\n0.2468873\n\n\n2\na\nInactive care\n0.0412518\n0.9587482\n38.24637\n37\n47.60860\n50.02591\n0.4179232\n1\n1.0529915\n0.7116809\n1035.0761\n839.7333\n0.8244666\n0.2949230\n\n\n3\na\nInactive long term sick\n0.5018528\n0.4981472\n48.00106\n50\n38.39359\n30.05688\n0.1997880\n1\n0.7101219\n0.5442501\n972.3600\n878.2266\n0.3006882\n0.9697131\n\n\n4\na\nInactive other\n0.4437299\n0.5562701\n37.73633\n39\n47.71277\n50.92335\n0.2893891\n1\n1.1229773\n0.6990291\n1091.7166\n840.0000\n0.5241158\n0.3786408\n\n\n5\na\nInactive retired\n0.3504823\n0.6495177\n60.95269\n62\n51.92955\n45.44033\n0.0781250\n1\n1.3491260\n0.8495860\n1403.6533\n1154.4100\n0.0514469\n0.5526921\n\n\n6\na\nInactive student\n0.4757917\n0.5242083\n20.29233\n18\n51.71938\n54.68187\n0.4268516\n1\n1.2362536\n0.7003420\n1101.5285\n924.4520\n0.6736456\n0.1257862\n\n\n7\na\nUnemployed\n0.5661787\n0.4338213\n35.78428\n34\n46.66679\n51.10128\n0.3501794\n1\n0.7587035\n0.5330132\n838.1079\n739.4296\n0.5123992\n0.3266407\n\n\n8\ni\nEmployed\n0.4769168\n0.5230832\n42.48786\n44\n48.51051\n52.68522\n0.2082216\n2\n1.7247441\n0.9063847\n2166.9771\n1831.2757\n0.4646034\n0.2394120\n\n\n9\ni\nInactive care\n0.0624585\n0.9375415\n42.60000\n42\n45.57478\n48.61528\n0.4371257\n1\n1.3308519\n0.8023160\n1340.2393\n1100.8120\n0.7711340\n0.3579508\n\n\n10\ni\nInactive long term sick\n0.4402036\n0.5597964\n48.70059\n52\n34.78817\n30.53564\n0.2076596\n1\n0.8240000\n0.5691429\n1700.6061\n1263.1200\n0.2625216\n0.9796265\n\n\n11\ni\nInactive other\n0.3856502\n0.6143498\n39.84305\n43\n44.98219\n50.06985\n0.2645740\n1\n1.3733333\n0.8333333\n1667.2382\n1356.3400\n0.4000000\n0.4099099\n\n\n12\ni\nInactive retired\n0.4169207\n0.5830793\n60.80259\n62\n51.13216\n46.54959\n0.1153552\n2\n1.6396677\n0.9096573\n1962.5151\n1698.3350\n0.0725869\n0.4656489\n\n\n13\ni\nInactive student\n0.4410163\n0.5589837\n19.58031\n18\n45.83370\n55.33526\n0.3866424\n2\n1.6169823\n0.8399511\n1585.6448\n1375.2226\n0.7398374\n0.1710646\n\n\n14\ni\nUnemployed\n0.4838478\n0.5161522\n37.39411\n36\n42.74357\n48.76011\n0.3640288\n1\n1.0920188\n0.6704225\n1179.2002\n1028.7872\n0.4766917\n0.4135447"
  }
]